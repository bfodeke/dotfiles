#!/bin/bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  echo -n "Git email: "
  read gitemail
  git config --global user.email $gitemail
  success 'gitconfig'
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
install_dotfiles


# Install homebrew and OS X specific apps.
if [ $(uname) == "Darwin" ]; then
  if ! which brew > /dev/null; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
  /usr/local/bin/brew update
  /usr/local/bin/brew upgrade
  /usr/local/bin/brew tap drud/ddev
  /usr/local/bin/brew tap netlify/netlifyctl
  /usr/local/bin/brew tap dart-lang/dart
  /usr/local/bin/brew install ansible
  /usr/local/bin/brew install awscli
  /usr/local/bin/brew install clamav
  /usr/local/bin/brew install cocoapods
  /usr/local/bin/brew install ctags
  /usr/local/bin/brew install dart
  /usr/local/bin/brew install ddev
  /usr/local/bin/brew install deno
  /usr/local/bin/brew install dos2unix
  /usr/local/bin/brew install git
  /usr/local/bin/brew install go
  /usr/local/bin/brew install httpie
  /usr/local/bin/brew install inetutils
  /usr/local/bin/brew install jo
  /usr/local/bin/brew install jsonpp
  /usr/local/bin/brew install mariadb
  /usr/local/bin/brew install mosh
  /usr/local/bin/brew install netlifyctl
  /usr/local/bin/brew install nmap
  /usr/local/bin/brew install php@7.3
  /usr/local/bin/brew install pv
  /usr/local/bin/brew install reattach-to-user-namespace
  /usr/local/bin/brew install redis
  /usr/local/bin/brew install ssh-copy-id
  /usr/local/bin/brew install the_silver_searcher
  /usr/local/bin/brew install textql
  /usr/local/bin/brew install tig
  /usr/local/bin/brew install tmux
  /usr/local/bin/brew install tree
  /usr/local/bin/brew install vim
  /usr/local/bin/brew install watch
  /usr/local/bin/brew install watchman
  /usr/local/bin/brew install wget

  # Install Monaco for Powerline font.
  cp ~/.dotfiles/fonts/MonacoforPowerline.otf /Library/Fonts/

  # Install wuzz.
  go get github.com/asciimoo/wuzz

  # Install tmuxinator.
  if ! which tmuxinator > /dev/null; then
    $(which gem) install tmuxinator --user-install
  fi
fi

# Install Debian Linux specific apps.
if [ -f /etc/debian_version ]; then
  sudo apt-get update
  sudo apt-get -y install ansible
  sudo apt-get -y install ctags
  sudo apt-get -y install dos2unix
  sudo apt-get -y install httpie
  sudo apt-get -y install jo
  sudo apt-get -y install mariadb-client
  sudo apt-get -y install mosh
  sudo apt-get -y install php
  sudo apt-get -y install php-curl
  sudo apt-get -y install php-zip
  sudo apt-get -y install php-simplexml
  sudo apt-get -y install php-mbstring
  sudo apt-get -y install pv
  sudo apt-get -y install redis-tools
  sudo apt-get -y install ruby
  sudo apt-get -y install silversearcher-ag
  sudo apt-get -y install tig
  sudo apt-get -t stretch-backports -y install tmux
  sudo apt-get -y install tree

  # Stop Apache from starting on boot.
  sudo systemctl disable apache2

  # Install tmuxinator.
  if ! which tmuxinator > /dev/null; then
    sudo $(which gem) install tmuxinator
  fi

  # Install Deno.
  curl -fsSL https://deno.land/x/install/install.sh | sh
fi

# Install zsh syntax highlighting.
if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting ]; then
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
fi

# Download gruvbox for iTerm2.
if [ ! -f ~/bin/gruvbox-dark.itermcolors ]; then
  cd ~/bin && wget https://raw.githubusercontent.com/morhetz/gruvbox-contrib/master/iterm2/gruvbox-dark.itermcolors
fi

# Install Sack.
if [ ! -d ~/.dotfiles/bin/sack ]; then
  git clone https://github.com/sampson-chen/sack.git ~/.dotfiles/bin/sack && cd ~/.dotfiles/bin/sack && chmod +x install_sack.sh && ./install_sack.sh
fi

# Install nvm and global node.
if [ ! -d "$HOME/.nvm" ]; then
  mkdir -p $HOME/.nvm
fi
curl -o- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
nvm install node
nvm alias default 14

# Install npm packags.
if [ $(uname) == "Darwin" ]; then
  npm install -g gatsby-cli
  npm install -g firebase-tools
  npm install -g lighthouse
  npm install -g yarn
fi

# Disable gatsby telemetry.
gatsby telemetry --disable

# Install Plug.
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# Install plugins.
vim +PlugInstall +qall

# Update Plug and plugins.
vim +PlugUpgrade +PlugUpdate +qall

# Install Composer.
curl -Ss https://getcomposer.org/installer | php

if [ $(uname) == "Darwin" ]; then
  mv composer.phar /usr/local/bin/composer
  else sudo mv composer.phar /usr/local/bin/composer
fi

# Install Composer project dependencies.
composer global require hirak/prestissimo \
drush/config-extra \
pantheon-systems/terminus \
squizlabs/php_codesniffer \
dealerdirect/phpcodesniffer-composer-installer \
drupal/coder \
mglaman/drupal-check

# Run Composer global update.
composer global update

# Install Drush.
if [ $(uname) == "Darwin" ]
  then
    curl -OL https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar
    chmod +x drush.phar
    mv drush.phar /usr/local/bin/drush
  else
    wget -O drush.phar https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar
    chmod +x drush.phar
    sudo mv composer.phar /usr/local/bin/composer
fi

drush self-update

# Install Wodby CLI
if [ $(uname) == "Darwin" ]; then
  export WODBY_CLI_LATEST_URL=$(curl -s https://api.github.com/repos/wodby/wodby-cli/releases/latest | grep darwin-amd64 | grep browser_download_url | cut -d '"' -f 4)
  wget -qO- "${WODBY_CLI_LATEST_URL}" | tar xz -C /usr/local/bin
fi

# Update Flutter.
if which flutter > /dev/null; then
  flutter upgrade
fi

echo ''
echo '  All installed!'
