#!/bin/bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  echo -n "Git email: "
  read gitemail
  git config --global user.email $gitemail
  success 'gitconfig'
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
install_dotfiles

# Install homebrew and OS X specific apps
if [ $(uname) == "Darwin" ]; then
  which -s brew
  if [[ $? != 0  ]] ; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  /usr/local/bin/brew update
  /usr/local/bin/brew upgrade

  # For sierra, Xcode alone is not sufficient on Sierra.
  if [ $? != 0 ] ]; then
    xcode-select --install
    /usr/local/bin/brew upgrade
  fi

  /usr/local/bin/brew install ansible ctags git git-flow hub jo jsonpp liquidprompt mariadb nmap reattach-to-user-namespace ssh-copy-id the_silver_searcher tig tmux tree vim watch wget cowsay fortune

  # Install sack
  curl -o- https://raw.githubusercontent.com/sampson-chen/sack/master/install_sack.sh | bash

  # Install nvm and global node
  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh | bash
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh"  ] && . "$NVM_DIR/nvm.sh"

  # Install npm packags
  npm install -g angular-cli
  npm install -g eslint
  npm install -g typescript

  # Install rvm and global ruby
  curl -sSL https://get.rvm.io | bash -s stable
  export PATH="$PATH:$HOME/.rvm/bin"

  # Install lolcat for pretty colors
  gem install lolcat

  # Install Vagrant plugins
  which -s vagrant
  if [[ $? = 0  ]] ; then
    vagrant plugin install vagrant-cachier
    vagrant plugin install vagrant-hostsupdater
    vagrant plugin install vagrant-ip-show
    vagrant plugin install vagrant-scp
    vagrant plugin install vagrant-shell-commander
  fi
fi

# Install Monaco for Powerline font.
cp ~/.dotfiles/fonts/MonacoforPowerline.otf /Library/Fonts

# Install Plug
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# Install plugins
vim +PlugInstall +qall now

# Install Composer
curl -Ss https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer

# Install Drupal Console
curl https://drupalconsole.com/installer -L -o drupal.phar
mv drupal.phar /usr/local/bin/drupal
chmod +x /usr/local/bin/drupal
drupal init --override
drupal check

# Install Drush and related drush tools
composer global require drush/drush:8.*
composer global require drush/config-extra
composer global require "hirak/prestissimo:^0.3"
if [ ! -d "$HOME/.drush" ]; then
  mkdir -p $HOME/.drush
fi
if [ ! -d "$HOME/.drush/composer_generate" ]; then
  git clone --branch 7.x-1.x https://git.drupal.org/project/composer_generate.git $HOME/.drush/composer_generate
  cd $HOME/.drush/composer_generate
  git checkout tags/7.x-1.3 -b 7.x-1.3
  cd -
fi
if [ ! -d "$HOME/.drush/drupalgeddon" ]; then
  git clone --branch 7.x-1.x https://git.drupal.org/project/drupalgeddon.git $HOME/.drush/drupalgeddon
  cd -
fi
if [ ! -d "$HOME/.drush/registry_rebuild" ]; then
  git clone --branch 7.x-2.x https://git.drupal.org/project/registry_rebuild.git $HOME/.drush/registry_rebuild
  cd $HOME/.drush/registry_rebuild
  git checkout tags/7.x-2.3 -b 7.x-2.3
  cd -
fi
if [ ! -d "$HOME/.drush/security_review" ]; then
  git clone --branch 7.x-1.x https://git.drupal.org/project/security_review.git $HOME/.drush/security_review
  cd $HOME/.drush/security_review
  git checkout tags/7.x-1.2 -b 7.x-1.2
  cd -
fi
if [ ! -d "$HOME/.drush/securitytesting" ]; then
  git clone --branch 7.x-1.x https://git.drupal.org/project/securitytesting.git $HOME/.drush/securitytesting
  cd -
fi
if [ ! -d "$HOME/.drush/sensitive_data" ]; then
  git clone --branch 7.x-1.x https://git.drupal.org/project/sensitive_data.git $HOME/.drush/sensitive_data
  cd $HOME/.drush/sensitive_data
  git checkout tags/7.x-1.0 -b 7.x-1.0
  cd -
fi
if [ ! -d "$HOME/.drush/site_audit" ]; then
  git clone --branch 7.x-1.x https://git.drupal.org/project/site_audit.git $HOME/.drush/site_audit
  cd $HOME/.drush/site_audit
  git checkout tags/7.x-1.16 -b 7.x-1.16
  composer install
  cd -
fi
if [ ! -d "$HOME/.drush/unused_modules" ]; then
  git clone --branch 7.x-1.x https://git.drupal.org/project/unused_modules.git $HOME/.drush/unused_modules
  cd $HOME/.drush/unused_modules
  git checkout tags/7.x-1.5 -b 7.x-1.5
  cd -
fi

# Install coder
composer global require drupal/coder
cp -r ~/.composer/vendor/drupal/coder/coder_sniffer/Drupal ~/.composer/vendor/drupal/coder/coder_sniffer/DrupalPractice ~/.composer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards

drush cc drush

echo ''
echo '  All installed!'

